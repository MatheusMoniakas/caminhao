const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configura√ß√£o do projeto...\n');

// Verificar estrutura de pastas
const requiredFolders = [
  'frontend',
  'backend',
  'frontend/src',
  'backend/src',
  'backend/scripts'
];

console.log('üìÅ Verificando estrutura de pastas:');
requiredFolders.forEach(folder => {
  if (fs.existsSync(folder)) {
    console.log(`  ‚úÖ ${folder}`);
  } else {
    console.log(`  ‚ùå ${folder} - FALTANDO`);
  }
});

// Verificar arquivos importantes
const requiredFiles = [
  'package.json',
  'frontend/package.json',
  'backend/package.json',
  'frontend/vite.config.ts',
  'backend/tsconfig.json',
  'frontend/tsconfig.json',
  'backend/src/index.ts',
  'frontend/src/main.tsx',
  'frontend/netlify.toml'
];

console.log('\nüìÑ Verificando arquivos importantes:');
requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - FALTANDO`);
  }
});

// Verificar vari√°veis de ambiente
console.log('\nüîß Verificando configura√ß√£o de ambiente:');

// Backend .env
if (fs.existsSync('backend/.env')) {
  console.log('  ‚úÖ backend/.env existe');
  
  const backendEnv = fs.readFileSync('backend/.env', 'utf8');
  const requiredBackendVars = [
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'JWT_SECRET',
    'JWT_REFRESH_SECRET'
  ];
  
  requiredBackendVars.forEach(varName => {
    if (backendEnv.includes(varName) && !backendEnv.includes(`${varName}=your_`)) {
      console.log(`    ‚úÖ ${varName} configurado`);
    } else {
      console.log(`    ‚ùå ${varName} n√£o configurado ou com valor padr√£o`);
    }
  });
} else {
  console.log('  ‚ùå backend/.env n√£o existe - CRIE baseado no env.example');
}

// Frontend .env
if (fs.existsSync('frontend/.env')) {
  console.log('  ‚úÖ frontend/.env existe');
  
  const frontendEnv = fs.readFileSync('frontend/.env', 'utf8');
  if (frontendEnv.includes('VITE_API_URL') && !frontendEnv.includes('your_')) {
    console.log('    ‚úÖ VITE_API_URL configurado');
  } else {
    console.log('    ‚ùå VITE_API_URL n√£o configurado ou com valor padr√£o');
  }
} else {
  console.log('  ‚ùå frontend/.env n√£o existe - CRIE baseado no env.example');
}

// Verificar node_modules
console.log('\nüì¶ Verificando depend√™ncias:');
if (fs.existsSync('node_modules')) {
  console.log('  ‚úÖ node_modules (raiz)');
} else {
  console.log('  ‚ùå node_modules (raiz) - Execute: npm install');
}

if (fs.existsSync('frontend/node_modules')) {
  console.log('  ‚úÖ frontend/node_modules');
} else {
  console.log('  ‚ùå frontend/node_modules - Execute: cd frontend && npm install');
}

if (fs.existsSync('backend/node_modules')) {
  console.log('  ‚úÖ backend/node_modules');
} else {
  console.log('  ‚ùå backend/node_modules - Execute: cd backend && npm install');
}

// Verificar git
console.log('\nüîó Verificando Git:');
if (fs.existsSync('.git')) {
  console.log('  ‚úÖ Reposit√≥rio Git inicializado');
} else {
  console.log('  ‚ùå Reposit√≥rio Git n√£o inicializado');
}

console.log('\nüéØ Pr√≥ximos passos:');
console.log('1. Configure o Supabase seguindo SUPABASE-SETUP.md');
console.log('2. Instale as depend√™ncias: npm run install:all');
console.log('3. Execute o projeto: npm run dev');
console.log('4. Acesse: http://localhost:5173');

console.log('\n‚ú® Verifica√ß√£o conclu√≠da!');
